#!/bin/bash

# Constants
readonly CONFIG_FILENAME="*.conf"
readonly DEFAULT_CONFIG_PATHS=(
    "$HOME/.config/hypr"
    "$HOME/.config/hyprland"
    "/etc/hypr"
    "$XDG_CONFIG_HOME/hypr"
)
readonly STORED_CONFIG_PATH="$HOME/.hyprland_monitor_config_path"

# Colors and formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Add at the beginning of the script
declare -i CURRENT_STEP=1  # 1=monitor, 2=resolution, 3=refresh_rate
# Function for cleanup
cleanup() {
    unset MONITOR_DATA MONITOR_LIST RESOLUTIONS REFRESH_RATES
}

trap cleanup EXIT

# Function to store settings
store_settings() {
    PREVIOUS_SETTINGS["monitor"]=$MONITOR
    PREVIOUS_SETTINGS["resolution"]=$RESOLUTION
    PREVIOUS_SETTINGS["refresh_rate"]=$REFRESH_RATE
}

# Function to restore settings
restore_previous_settings() {
    if [ -n "${PREVIOUS_SETTINGS[monitor]}" ]; then
        print_status "Restoring previous settings..."
        CONFIG_LINE="monitor=${PREVIOUS_SETTINGS[monitor]},${PREVIOUS_SETTINGS[resolution]}@${PREVIOUS_SETTINGS[refresh_rate]},auto,1"
        update_config "$CONFIG_FILE" "$CONFIG_LINE" "${PREVIOUS_SETTINGS[monitor]}"
        hyprctl reload
        print_success "Previous settings restored"
    fi
}

# Error handling function
handle_error() {
    local message="$1"
    print_error "$message"
    restore_previous_settings
    exit 1
}

# Reusable FZF selection function
fzf_select() {
    local prompt="$1"
    local header="$2"
    local input="$3"
    local preview="$4"

    echo "$input" | fzf \
        --prompt="$prompt " \
        --header="$header" \
        --border=rounded \
        --height=~50% \
        --layout=reverse \
        --color='pointer:cyan' \
        --bind 'backspace:abort' \
        ${preview:+--preview "$preview"}
}

# ASCII Art Header
print_header() {
    clear
    echo -e "${CYAN}"
    echo '╔════════════════════════════════════════╗'
    echo '║     Hyprland Monitor Configuration     ║'
    echo '╚════════════════════════════════════════╝'
    echo -e "${NC}"

    # Display current user only
    printf "${MAGENTA}Current User: ${NC}%s\n" "$(whoami)"
    echo
}

# Function to print status messages
print_status() {
    echo -e "${BLUE}[*]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✔]${NC} $1"
}

print_error() {
    echo -e "${RED}[✘]${NC} $1" >&2
}


# Check for required dependencies
check_dependencies() {
    local missing_deps=0
    for dep in fzf wlr-randr jq find; do
        if ! command -v $dep &> /dev/null; then
            print_error "'$dep' is not installed."
            missing_deps=1
        fi
    done

    [ $missing_deps -eq 1 ] && exit 1
}

# Function to find Hyprland config files
find_config_files() {
    if [ -f "$STORED_CONFIG_PATH" ]; then
        local stored_path=$(cat "$STORED_CONFIG_PATH")
        if [ -f "$stored_path" ]; then
            echo "$stored_path"
            return
        else
            print_error "Stored config file no longer exists. Searching for new config files..."
            rm "$STORED_CONFIG_PATH"
        fi
    fi

    local config_files=()

    for path in "${DEFAULT_CONFIG_PATHS[@]}"; do
        if [ -d "$path" ]; then
            while IFS= read -r file; do
                config_files+=("$file")
            done < <(find "$path" -type f -name "$CONFIG_FILENAME" 2>/dev/null)
        fi
    done

    if [ ${#config_files[@]} -eq 0 ]; then
        echo -e "${YELLOW}No config files found in default locations.${NC}"
        echo -e "${BOLD}Enter custom config file path (or press Enter to exit):${NC}"
        read -r custom_path

        if [ -n "$custom_path" ] && [ -f "$custom_path" ]; then
            config_files+=("$custom_path")
        else
            [ -n "$custom_path" ] && handle_error "Invalid path or file does not exist."
            exit 1
        fi
    fi

    local selected_config
    selected_config=$(printf '%s\n' "${config_files[@]}" | \
        fzf_select "󰈙 Select config file: " "Press ENTER to confirm, Backspace to restart" "$(cat -)")

    [ -z "$selected_config" ] && return 1
    echo "$selected_config" > "$STORED_CONFIG_PATH"
    echo "$selected_config"
}

# Function to get monitor data
get_monitor_data() {
    local monitor="$1"
    wlr-randr --json | jq -r --arg mon "$monitor" '.[] | select(.name == $mon)' || \
        handle_error "Failed to get monitor data"
}

# Function to format refresh rate
format_refresh_rate() {
    awk '
    function format_rate(rate) {
        return (rate >= 100) ? sprintf("%.3f", rate) : sprintf("%.2f", rate)
    }
    {
        print format_rate($1)
    }'
}

# Function to get refresh rates
get_refresh_rates() {
    local monitor_data="$1"
    local width="$2"
    local height="$3"

    echo "$monitor_data" | jq -r --arg w "$width" --arg h "$height" \
        '.modes[] | select(.width == ($w|tonumber) and .height == ($h|tonumber)) | .refresh' | \
        format_refresh_rate | sort -n | uniq
}

# Validate configuration
validate_config() {
    local monitor="$1"
    local resolution="$2"
    local refresh_rate="$3"

    [[ -z "$monitor" ]] && handle_error "Invalid monitor selection"
    [[ -z "$resolution" ]] && handle_error "Invalid resolution selection"
    [[ -z "$refresh_rate" ]] && handle_error "Invalid refresh rate selection"
}

# Update configuration
update_config() {
    local config_file="$1"
    local config_line="$2"
    local monitor="$3"

    # Create backup of current config
    cp "$config_file" "${config_file}.backup"

    if grep -q "^monitor=$monitor," "$config_file"; then
        sed -i "s|^monitor=$monitor,.*|$config_line|" "$config_file"
    else
        echo "$config_line" >> "$config_file"
    fi

    # Verify the change
    if ! grep -q "^$config_line$" "$config_file"; then
        print_error "Failed to update configuration"
        mv "${config_file}.backup" "$config_file"
        return 1
    fi

    rm -f "${config_file}.backup"
    return 0
}

# Main script with proper navigation
while true; do
    print_header
    print_status "Checking dependencies..."
    check_dependencies
    print_success "All dependencies found!"

    # Get config file (only on first run or complete restart)
    if [ $CURRENT_STEP -eq 1 ]; then
        print_status "Locating Hyprland config files..."
        CONFIG_FILE=$(find_config_files)
        [ -z "$CONFIG_FILE" ] && continue
        print_success "Selected config file: ${CYAN}$CONFIG_FILE${NC}"
    fi

    case $CURRENT_STEP in
        1)  # Monitor selection
            print_status "Detecting monitors..."
            MONITOR_LIST=$(hyprctl monitors | awk '/Monitor/{print $2}')
            [ -z "$MONITOR_LIST" ] && handle_error "No monitors detected."

            echo -e "\n${YELLOW}${BOLD}Available Monitors:${NC}"
            echo -e "${CYAN}$(echo "$MONITOR_LIST" | nl -w2 -s') ')${NC}"

            echo -e "\n${BOLD}Use arrow keys to select a monitor (Backspace to restart):${NC}"
            MONITOR=$(fzf_select "󰍹 Select monitor: " "Press ENTER to confirm, Backspace to restart" "$MONITOR_LIST")
            if [ -z "$MONITOR" ]; then
                continue
            else
                CURRENT_STEP=2
                print_success "Selected monitor: ${CYAN}$MONITOR${NC}"
            fi
            ;;

        2)  # Resolution selection
            print_status "Fetching available resolutions..."
            MONITOR_DATA=$(get_monitor_data "$MONITOR")
            RESOLUTIONS=$(echo "$MONITOR_DATA" | jq -r '.modes[] | "\(.width)x\(.height)"' | sort -u)
            [ -z "$RESOLUTIONS" ] && handle_error "No resolutions found for monitor $MONITOR."

            echo -e "\n${YELLOW}${BOLD}Available Resolutions:${NC}"
            echo -e "${CYAN}$(echo "$RESOLUTIONS" | nl -w2 -s') ')${NC}"

            echo -e "\n${BOLD}Use arrow keys to select a resolution (Backspace to go back):${NC}"
            RESOLUTION=$(fzf_select "󰍺 Select resolution: " "Press ENTER to confirm, Backspace to go back" "$RESOLUTIONS")
            if [ -z "$RESOLUTION" ]; then
                CURRENT_STEP=1
                continue
            else
                CURRENT_STEP=3
                print_success "Selected resolution: ${CYAN}$RESOLUTION${NC}"
            fi
            ;;

        3)  # Refresh rate selection
            IFS='x' read -r width height <<< "$RESOLUTION"
            REFRESH_RATES=$(get_refresh_rates "$MONITOR_DATA" "$width" "$height")

            echo -e "\n${YELLOW}${BOLD}Available Refresh Rates:${NC}"
            echo -e "${CYAN}$(echo "$REFRESH_RATES" | nl -w2 -s') Hz')${NC}"

            echo -e "\n${BOLD}Use arrow keys to select a refresh rate (Backspace to go back):${NC}"
            REFRESH_RATE=$(fzf_select "󰁯 Select refresh rate: " "Press ENTER to confirm, Backspace to go back" "$REFRESH_RATES")
            if [ -z "$REFRESH_RATE" ]; then
                CURRENT_STEP=2
                continue
            fi
            print_success "Selected refresh rate: ${CYAN}${REFRESH_RATE}Hz${NC}"

            # Process the configuration
            validate_config "$MONITOR" "$RESOLUTION" "$REFRESH_RATE"
            CONFIG_LINE="monitor=$MONITOR,$RESOLUTION@${REFRESH_RATE},auto,1"

            print_status "Updating configuration..."
            if update_config "$CONFIG_FILE" "$CONFIG_LINE" "$MONITOR"; then
                print_success "Configuration updated successfully"

                # Apply changes
                print_status "Applying changes..."
                hyprctl reload

                # Final status
                echo -e "\n${GREEN}╔════════════════════════════════════════╗${NC}"
                echo -e "${GREEN}║            Changes Applied!             ║${NC}"
                echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
                echo -e "\n${BOLD}Config File:${NC}    ${CYAN}$CONFIG_FILE${NC}"
                echo -e "${BOLD}Monitor:${NC}        ${CYAN}$MONITOR${NC}"
                echo -e "${BOLD}Resolution:${NC}     ${CYAN}$RESOLUTION${NC}"
                echo -e "${BOLD}Refresh Rate:${NC}   ${CYAN}${REFRESH_RATE}Hz${NC}\n"

                # Reset step for next run
                CURRENT_STEP=1
            else
                handle_error "Failed to update configuration"
            fi

            # Ask if user wants to make more changes
            read -r -p "Press Enter to make more changes or Ctrl+C to exit..."
            ;;
    esac
done
